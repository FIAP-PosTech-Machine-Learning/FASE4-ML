{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Coleta e Pré-processamento dos Dados\n",
    "\n",
    "Neste notebook, utilizaremos a biblioteca `yfinance` para coletar dados históricos de preços de ações e realizaremos o pré-processamento necessário para preparar os dados para o modelo LSTM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "\n",
    "# Especifique o símbolo da empresa que você vai trabalhar\n",
    "symbol = 'DIS'  # Exemplo: Disney\n",
    "\n",
    "# Configure data de início e fim da sua base\n",
    "start_date = '2018-01-01'\n",
    "end_date = '2024-07-20'\n",
    "\n",
    "# Use a função download para obter os dados\n",
    "df = yf.download(symbol, start=start_date, end=end_date)\n",
    "\n",
    "# Exibir as primeiras linhas do dataframe\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pré-processamento dos Dados\n",
    "\n",
    "Aqui, realizaremos o pré-processamento dos dados, incluindo a normalização e a criação de conjuntos de dados para treinamento e teste."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Normalização dos dados\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler(feature_range=(0, 1))\n",
    "scaled_data = scaler.fit_transform(df['Close'].values.reshape(-1, 1))\n",
    "\n",
    "# Criar conjuntos de dados para treinamento e teste\n",
    "train_size = int(len(scaled_data) * 0.8)\n",
    "train_data = scaled_data[:train_size]\n",
    "test_data = scaled_data[train_size:]\n",
    "\n",
    "# Função para criar conjuntos de dados com base em um tamanho de janela\n",
    "def create_dataset(data, time_step=1):\n",
    "    X, Y = [], []\n",
    "    for i in range(len(data) - time_step - 1):\n",
    "        a = data[i:(i + time_step), 0]\n",
    "        X.append(a)\n",
    "        Y.append(data[i + time_step, 0])\n",
    "    return np.array(X), np.array(Y)\n",
    "\n",
    "# Definir o tamanho da janela\n",
    "time_step = 60\n",
    "\n",
    "# Criar os conjuntos de dados de treinamento e teste\n",
    "X_train, y_train = create_dataset(train_data, time_step)\n",
    "X_test, y_test = create_dataset(test_data, time_step)\n",
    "\n",
    "# Reshape os dados para o formato [amostras, tempo, características]\n",
    "X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)\n",
    "X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)\n",
    "\n",
    "# Salvar os dados pré-processados em um arquivo CSV\n",
    "pd.DataFrame(scaled_data, columns=['Close']).to_csv('../data/dataset.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}